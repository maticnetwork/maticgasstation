name: Gasstation Mainnet production Deployment
on:
  push:
    branches: ['mumbai-eip1559']
    paths:
      - 'mgs/**'
  workflow_dispatch:
env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: gasstation-testnet-ecr
  ECS_SERVICE: gasstation-testnet-ecs-service
  ECS_CLUSTER: gasstation-testnet-ecs-cluster 
  ECS_TASK_DEFINITION: mgs/testnet-taskdef.json
  CONTAINER_NAME: gasstation-testnet


jobs:
  deploy:
    name: Gasstation Mainnet production Deployment
    permissions:
      id-token: write
      contents: write
    environment: production-testnet
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::042947190491:role/gasstation-testnet-GithubActionsRole
          role-session-name: GasstationTestnetGithubActionsSession
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./mgs  
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
